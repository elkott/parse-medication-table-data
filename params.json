{
  "name": "Parse-medication-table-data",
  "tagline": "Utility to demonstrate parsing medications database CSV files into JSON objects, and using the latter to construct Neo4j Cypher queries.",
  "body": "# parse-medication-table-data\r\n\r\nThis project is to illustrate the use of the PAPAPARSE CSV table file parser, and UNDERSCORE.JS library,  and a downstream application to use the output JSON objects to create queries to construct a small Neo4j graph database. Only the Neo4j Cypher queries are output, which can be used to feed a Neo4j instance to build the graph. This project also uses the MATERIALIZE.CSS framework.\r\n\r\n## Notes on the project\r\n1. This project is stand alone.\r\n2. A MeteorJS version will be added to demonstrate the connection to cloud-hosted Neo4j database instance.\r\n3. The table files are obtained from the HealthCanada publicly-available drug database.\r\n4. Only a two files are used, with subset of data in each:\r\n   (a) COMP.TXT - includes drug company data, and \r\n   (b) DRUG.TXT - includes drug data.\r\n\r\n\r\n## How to run the project\r\n1. Download repository ZIP file, and unzip it. It will unzip to, say, the \"parse-medication-table-data\" folder.\r\n2. Browse to the \"parse-medication-table-data/html\" subfolder.\r\n3. Open \"index.html\" in the browser (tested in chrome, and FireFox).\r\n4. Load the database sample files from the \"DPDFiles\" sub-folder. Start with the \"COMP.TXT\" file first, and then \"DRUG.TXT\".\r\n5. If both files are loaded successfully, the two main functionality of this example will become available:\r\n    (a) Display drug brand name, and manufacturer data, and \r\n    (b) Generate Neo4j Cypher queries to create nodes representing drug, and drug companies, and their relationships.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}